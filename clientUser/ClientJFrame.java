/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ConnectException;
import java.net.NoRouteToHostException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author aldo 
 */
public class ClientJFrame extends javax.swing.JFrame implements Runnable {
    
      private String serverName;
      private int port;
      private Socket server;
      private InputStream in2;      
      private OutputStream outToServer;
      private DataOutputStream out;
      private PrintWriter pw;
      private BufferedReader in;
      private Thread threadAttesaInvito; /* Riferimento al thread attesa invito */
      
      private ServerSocket listener;
      private Socket gameSocket;
      private ListaUtenti listaUtenti;
      
    /**
     * Creates new form ClientJFrame
     */
    public ClientJFrame() {
        
          try {
              UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
          } catch (ClassNotFoundException ex) {
              Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
          } catch (InstantiationException ex) {
              Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
          } catch (IllegalAccessException ex) {
              Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
          } catch (UnsupportedLookAndFeelException ex) {
              Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }

        initComponents();
        System.out.println("Connecting to " + serverName + " on port " + port);
        
        //this.client = new Socket();

        this.utentiConnessiBtn.setEnabled(false);
        this.disconnettiBtn.setEnabled(false);
          
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        utentiConnessiBtn = new javax.swing.JButton();
        portTxt = new javax.swing.JTextField();
        connettiBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        statoLbl = new javax.swing.JLabel();
        disconnettiBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ipTxt = new javax.swing.JTextField();
        ipLbl1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Battaglia Navale");
        setBackground(java.awt.Color.green);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        utentiConnessiBtn.setText("Lista Utenti Connessi");
        utentiConnessiBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utentiConnessiBtnActionPerformed(evt);
            }
        });

        portTxt.setPreferredSize(new java.awt.Dimension(10, 20));

        connettiBtn.setText("Connetti al Server");
        connettiBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connettiBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Stato :");

        statoLbl.setText("Offlne");
        statoLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                statoLblMouseClicked(evt);
            }
        });

        disconnettiBtn.setText("Disconnetti");
        disconnettiBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnettiBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("DejaVu Sans", 1, 36)); // NOI18N
        jLabel2.setText("Battaglia Navale");

        ipTxt.setPreferredSize(new java.awt.Dimension(10, 20));

        ipLbl1.setText("Indirizzo IP Server :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(ipLbl1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(ipTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(connettiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(portTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(utentiConnessiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(disconnettiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(6, 6, 6)
                        .addComponent(statoLbl)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 55, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(statoLbl))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(28, 28, 28)
                .addComponent(ipLbl1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ipTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(portTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(connettiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(utentiConnessiBtn)
                .addGap(6, 6, 6)
                .addComponent(disconnettiBtn)
                .addContainerGap(151, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void utentiConnessiBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utentiConnessiBtnActionPerformed
       listaUtenti = new ListaUtenti();
       listaUtenti.setSocket(server);
       listaUtenti.setListener(this.listener);
       listaUtenti.setIdGiocatore(this.portTxt.getText());
       listaUtenti.setIn(this.in);
       listaUtenti.setPw(this.pw);
       listaUtenti.setClientJFrame(this);
       //listaUtenti.setIn(in);
  
       listaUtenti.setVisible(true);
    }//GEN-LAST:event_utentiConnessiBtnActionPerformed

    private void connettiBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connettiBtnActionPerformed

        
        if(this.ipTxt.getText().isEmpty() ||  this.ipTxt.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Campi ip o porta lasciati vuoti!");
        }
        else
        {
        
          try {
              String id = null;
              
              this.serverName = this.ipTxt.getText();
              this.port = Integer.parseInt(this.portTxt.getText());
              this.connessioneServer();
              

              id = JOptionPane.showInputDialog(this, "Inserisci il tuo ID","ID Giocatore", JOptionPane.WARNING_MESSAGE);
              
              
              if(id!=null && !id.isEmpty())
              {
                  if(!id.isEmpty())
                  {
                        
                        System.out.println("Inserimento id...");
                        this.pw.println(id);
                        String risposta = in.readLine();
                        if(risposta.equals("No"))
                        {
                            this.server.close();
                            JOptionPane.showMessageDialog(this, "ID non riconosciuto oppure già in uso.");
                        }
                        else
                        {
                             
                            this.statoLbl.setText("Connesso");
                            this.utentiConnessiBtn.setEnabled(true);
              
                            this.ipTxt.setEnabled(false);
                            this.portTxt.setEnabled(false);
                            this.connettiBtn.setEnabled(false);
                            this.disconnettiBtn.setEnabled(true);
                            
                            threadAttesaInvito = new Thread(this,"Thread 1");

                            threadAttesaInvito.start();
                        }
                  }
              }
              
          } 
          catch (IllegalArgumentException ex)
          {
                JOptionPane.showMessageDialog(this, "La porta inserita è fuori range!","Porta fuori range!",JOptionPane.ERROR_MESSAGE);

          }
          catch (NoRouteToHostException ex) {
                JOptionPane.showMessageDialog(this, "Non è possibile trovare il server","Server non raggiungibile",JOptionPane.ERROR_MESSAGE);
          }
          catch(ConnectException ex)
          {
                JOptionPane.showMessageDialog(this, "Impossibile connettersi al server!","Connessione non riuscita!",JOptionPane.ERROR_MESSAGE);
          }
          catch (IOException ex) {
                Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
          
        }
          
    }//GEN-LAST:event_connettiBtnActionPerformed

    private void disconnettiBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnettiBtnActionPerformed
          try {
              this.listener.close();
              this.server.close();
              this.statoLbl.setText("Offline");
              this.connettiBtn.setEnabled(true);
              this.ipTxt.setEnabled(false);
              this.portTxt.setEnabled(false);
              this.ipTxt.setEnabled(true);
              this.portTxt.setEnabled(true);
          } catch (IOException ex) {
              Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
    }//GEN-LAST:event_disconnettiBtnActionPerformed

    private void statoLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statoLblMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_statoLblMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       this.ipTxt.setText("127.0.0.1");
       this.portTxt.setText("8025");
    }//GEN-LAST:event_formWindowOpened

    public void connessioneServer() throws IOException
    {
         
              this.server = new Socket(serverName, port);
              System.out.println("Just connected to " + server.getRemoteSocketAddress());
              pw = new PrintWriter(server.getOutputStream(), true);
              //outToServer = this.client.getOutputStream();
              //out = new DataOutputStream(outToServer);
              //in2 = this.client.getInputStream();
              in = new BufferedReader(new InputStreamReader(server.getInputStream()));
              
              //in = new DataInputStream(server.getInputStream());
              this.pw.println("utente");
              
            

        
         
    }


    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connettiBtn;
    private javax.swing.JButton disconnettiBtn;
    private javax.swing.JLabel ipLbl1;
    private javax.swing.JTextField ipTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField portTxt;
    private javax.swing.JLabel statoLbl;
    private javax.swing.JButton utentiConnessiBtn;
    // End of variables declaration//GEN-END:variables

    
    
    
    
    @Override
    public void run() {
        
          try {
              System.out.println("Thread Attesa Attivo");
              this.listener = new ServerSocket(9091);
              gameSocket = listener.accept();
               

              System.out.println("Connesso con me");
              //this.client.close();
              /* Ricevo invito dal giocatore che vuole giocare con me */
              int reply = JOptionPane.showConfirmDialog(null, "Sei stato invitato a giocare una partita. Accetti ?", "Invito", JOptionPane.YES_NO_OPTION);
              //this.in.close();
              //this.pw.close();
              
              PrintWriter pw2 = new PrintWriter(gameSocket.getOutputStream(), true);
              //BufferedReader in = new BufferedReader(new InputStreamReader(gameSocket.getInputStream()));
             // in.close();
             // pw2.close();
              
             /* Se la risposta all'invito è Si allora : */
        if (reply == JOptionPane.YES_OPTION) {
            
                this.listener.close();
                pw2.println("Si");

                System.out.println("Dentro!!!!!!!!!!!!!!11");
                this.gameSocket.setTcpNoDelay(true);
              
                GameClient gameClient = new GameClient(gameSocket,this.listener,0,new Giocatore2());
                gameClient.setClientJFrame(this);
                //gameClient.setListaUtenti(this.listaUtenti);
                gameClient.setPw(this.pw);
                gameClient.setIn(this.in);
                //gameClient.setServerSocket(this.server);
                gameClient.getGiocatore().setId(this.portTxt.getText());
                //gameClient.setT1(this.threadAttesaInvito);
                gameClient.setVisible(true);
                
               this.listaUtenti.setStato(false);
                
                /* Se il JFrame listaUtenti non è nullo allora lo chiudo */
                
                if(this.listaUtenti != null)
                {
                    this.listaUtenti.dispose();
                }
                
                
                

        }
        else {
           //JOptionPane.showMessageDialog(null, "GOODBYE");
           pw.println("No");
           pw2.println("No");
           this.gameSocket.close();
           this.listener.close();
           Thread t1 = new Thread(this);
           t1.start();
           //System.exit(0);
        }
                  
        } catch (IOException ex) {
              Logger.getLogger(ClientJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
         
         
    }
}
