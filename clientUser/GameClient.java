/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author aldo
 */
public class GameClient extends javax.swing.JFrame implements Runnable {
    
    boolean statoG1;
    boolean statoG2;
    private Giocatore giocatore;
    private Socket gameSocket;
    private Griglia griglia1;
    private Griglia griglia2; 
    private PosizionaJPanel posizionaJPanel;
    private BufferedReader in;
    private PrintWriter pw;
    private ObjectOutputStream os;
    private ObjectInputStream is;
    private ClientJFrame clientJFrame;
    private ListaUtenti listaUtenti;
    private ServerSocket listener;
    private Thread t1; /* riferimento al  Thread che riceve lista utenti */
    private int turno; 
    private int numNaviPos;
    private JLabel messaggio;
    private JLabel idGiocatore1;
    private JLabel idGiocatore2;
    
    
    JButton prontoBtn;
    /**
     * Creates new form gameClient
     */
    public GameClient() {
        initComponents();
        
    }

    
    GameClient(Socket socket,ServerSocket attesaServer,int turno,Giocatore giocatore) throws SocketException
    {
            this.statoG1 = false;
            this.statoG2 = false;
            this.turno = 0;
            this.gameSocket = socket;
            this.gameSocket.setTcpNoDelay(true);
            
            this.listener = attesaServer;
            
            this.giocatore = giocatore;
            this.giocatore.setGameClient(this);
            
            
            
             try {
            
            
            this.os = new ObjectOutputStream(this.gameSocket.getOutputStream());
           // this.os.flush();
            this.is = new ObjectInputStream(this.gameSocket.getInputStream());
           
            
        } catch (IOException ex) {
            Logger.getLogger(GameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
            
       
            this.creaGriglie();
            
            if(this.turno == 0)
            {
                Thread t2 = new Thread(this);
                t2.start();
            }
            
           this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
             
            this.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                chiusuraFinestra();
            }
            });
    }
    



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(650, 600));
        setSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 789, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 541, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    void iniziaPartita()
    {
        try {
            
            this.os.reset();
        } catch (IOException ex) {
            Logger.getLogger(GameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        this.turno = this.giocatore.getNumero()-1;
        
         if(this.turno == 1)
         {
             this.messaggio.setText("E' il tuo turno");
         }
         else
         {
             this.messaggio.setText("Turno avversario");
         }
         
        if(this.turno == 0)
        {
            Thread t2 = new Thread(this);
            t2.start();
        }
        
    }
    
    public void creaGriglie() {
        JPanel panel3 = new JPanel();

        //this.setLayout(new GridLayout(2,1));
        this.setLayout(new GridBagLayout());
        this.setPreferredSize(new Dimension(1000, 800));
        this.setSize(new Dimension(1000, 800));

         griglia1 = new Griglia();
         griglia2 = new Griglia();

        for (int i = 0; i < 100; i++) {
            
            griglia1.aggiungiCella(new Cella(i), new Griglia1Listener(i,this));
            griglia2.aggiungiCella(new Cella(i), new ButtonListener(i,this));

        }

        panel3.setLayout(new GridBagLayout());
        
        /* Il primo messaggio Ã¨ quello di posizionare le navi sul tavolo */
        messaggio = new JLabel("Posiziona le tue navi");
        
        messaggio.setFont(new Font("Serif", Font.PLAIN, 18));
        this.idGiocatore1 = new JLabel("Giocatore 1");
        this.idGiocatore2 = new JLabel("Giocatore 2");
        
        
        
        this.prontoBtn = new JButton("Pronto");
        this.prontoBtn.addActionListener(new ProntoListener(this));
        
        GridBagConstraints c = new GridBagConstraints();
        
        
        
        c.insets.top = 5;
        c.insets.bottom = 5;
        c.insets.left = 10;
        c.insets.right = 10;
        
        c.anchor = GridBagConstraints.CENTER;
         //c.fill = GridBagConstraints.BOTH;

        c.gridwidth = GridBagConstraints.REMAINDER;

        c.gridx = 0;
        c.gridy = 0;

        c.weightx = 1;
        c.weighty = 1;
        
        this.add(messaggio,c);
        
       
        c.gridwidth = 1;
        c.gridx = 0;
        c.gridy = 1;

        c.weightx = 1;
        c.weighty = 1;
        
        this.add(idGiocatore1,c);
        

        c.gridx = 1;
        c.gridy = 1;

        c.weightx = 1;
        c.weighty = 1;
        
        this.add(idGiocatore2,c);
        
        c.fill = GridBagConstraints.BOTH;
       
        
        c.gridx = 0;
        c.gridy = 2;

        c.weightx = 1d;
        c.weighty = 1d;

        this.add(griglia1, c);

        c.gridx = 1;
        c.gridy = 2;

        c.weightx = 1d;
        c.weighty = 1d;

        this.add(griglia2, c);

       
        
        
        c.gridx = 1;
        c.gridy = 3;

        c.weightx = 1;
        c.weighty = 1;
        
        c.gridwidth = 1;

        c.fill = GridBagConstraints.NONE;
        
        this.prontoBtn.setSize(new Dimension(550,50));
        this.prontoBtn.setPreferredSize(new Dimension(350,80));

        this.add(this.prontoBtn,c);
        
        
        
        c.gridx = 0;
        c.gridy = 3;

        c.weightx = 1;
        c.weighty = 1;
        
        c.gridwidth = 1;
            
            this.posizionaJPanel = new PosizionaJPanel();
            
            for(int i = 0; i < 5; i++)
            {
                c.gridy = 0+i;
                c.gridx = 0;
                this.posizionaJPanel.add(new JLabel("Nave da " + this.giocatore.getNavi().get(i).getColpiRimanenti()),c);
                c.gridx=1;
               
                this.posizionaJPanel.aggiungiRuotaBtn(new JButton("Ruota"),new RuotaListener(i, this), c);
                c.gridx = 2;
                this.posizionaJPanel.aggiungiPosizionaBtn(new JButton("Posiziona"),new PosizionaListener(i,this), c);
            }
            
            c.gridx = 0;
            c.gridy = 3;

            c.weightx = 1;
            c.weighty = 1;
        
            c.gridwidth = 1;
            
           this.add(this.posizionaJPanel,c);
        

        this.pack();
    }
    
  

    public void chiusuraFinestra()
    {
        
        this.getPw().println("fine");
        this.getPw().println("0");
                            
              try {
                  if(this.listener != null)
                    this.listener.close();
             

                   if(this.gameSocket != null)
                   {
                       this.gameSocket.close();
                   }
                                
              }
             catch (IOException ex) {
                  Logger.getLogger(GameClient.class.getName()).log(Level.SEVERE, null, ex);
              }
              
                            
            
                            
              Thread attesa = new Thread(this.clientJFrame);

              attesa.start();
        
                            
    }                  
    
    public int getTurno() {
        return turno;
    }

    public Socket getGameSocket() {
        return gameSocket;
    }

    public Griglia getGriglia1() {
        return griglia1;
    }

    public Griglia getGriglia2() {
        return griglia2;
    }

    public PosizionaJPanel getPosizionaJPanel() {
        return posizionaJPanel;
    }

    public int getNumNaviPos() {
        return numNaviPos;
    }

    public Giocatore getGiocatore() {
        return giocatore;
    }

    public JButton getProntoBtn() {
        return prontoBtn;
    }

    public ObjectOutputStream getOs() {
        return os;
    }

    public ObjectInputStream getIs() {
        return is;
    }

    public BufferedReader getIn() {
        return in;
    }

    public PrintWriter getPw() {
        return pw;
    }

    
    public ServerSocket getListener() {
        return listener;
    }

    public boolean getStatoG1() {
        return statoG1;
    }

    public boolean getStatoG2() {
        return statoG2;
    }
    
    public void setStatoG1(boolean stato) {
        this.statoG1 = stato;
    }

    public void setStatoG2(boolean statoG2) {
        this.statoG2 = statoG2;
    }

    public void setOs(ObjectOutputStream os) {
        this.os = os;
    }

    public void setIs(ObjectInputStream is) {
        this.is = is;
    }

    public void setTurno(int turno) {
        this.turno = turno;
    }

    public void incrementaNumNaviPos()
    {
        this.numNaviPos++;
    }
    
    public void setNumNaviPos(int numNaviPos) {
        this.numNaviPos = numNaviPos;
    }
     
    public void setIn(BufferedReader in) {
        this.in = in;
    }

    public void setPw(PrintWriter pw) {
        this.pw = pw;
    }
    
    public void setGameSocket(Socket gameSocket) {
        this.gameSocket = gameSocket;
    }

    public void setClientJFrame(ClientJFrame clientJFrame) {
        this.clientJFrame = clientJFrame;
    }

    public void setListener(ServerSocket listener) {
        this.listener = listener;
    }

    public void setT1(Thread t1) {
        this.t1 = t1;
    }

    public ListaUtenti getListaUtenti() {
        return this.listaUtenti;
    }

    public void setListaUtenti(ListaUtenti listaUtenti) {
        this.listaUtenti = listaUtenti;
    }  

    public JLabel getMessaggio() {
        return messaggio;
    }

    public JLabel getIdGiocatore1() {
        return idGiocatore1;
    }

    public JLabel getIdGiocatore2() {
        return idGiocatore2;
    }
    
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameClient().setVisible(true);
            }
        });
    }

    @Override
    public void run() {
        
        if(statoG1 && statoG2)
        {
            this.giocatore.RiceviAttacco();
        }
        else
        {
            this.giocatore.attesaPronto();
        }
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
